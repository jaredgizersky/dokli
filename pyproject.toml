
##############################################################################
# MYPY SETTINGS                                                              #
##############################################################################
[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
strict_optional = true
plugins = [
  "pydantic.mypy"
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = [
    "tests.*"
]
ignore_errors = true

##############################################################################
# RUFF SETTINGS                                                             #
##############################################################################

[tool.ruff]

# Same as Black.
line-length = 119

# Assume Python 3.10
target-version = "py310"

[tool.ruff.format]
exclude = ["__pycache__", ".pytest_cache", ".mypy_cache", ".venv",]

[tool.ruff.lint]
select = ["E", "F", "I", "PL", "B", "T20", "TCH", "ASYNC", "U", "UP", "LOG", "G", "ERA", "SIM", "D" ]

# On top of the Google convention, disable `D417`, which requires
# documentation for every function parameter.
ignore = ["D417", "PLR0913", "PLR2004", ]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

#############################################################################
# COVERAGE SETTINGS                                                          #
##############################################################################
[tool.coverage.run]
branch = true
omit = [
    "*tests.py",
    "*test_*.py",
    "*_tests.py",
]
source = [
    "dokli/"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "logger = logging.getLogger.__name__.",
    "[A-Z_][A-Z0-9_]* = .*",
    "from .* import .*",
    "import .*",
    "if __name__ == .__main__.:",
    "collections.namedtuple"
]
skip_covered = true
ignore_errors = true
show_missing = true

##############################################################################
# POETRY SETTINGS                                                            #
##############################################################################
[tool.poetry]
name = "dokli"
version = "0.1.0"
description = "Dokploy CLI and TUI"
authors = ["Jony Kalavera <mr.jony@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
typer = "^0.12.3"
pydantic = "^2.8.2"
textual = { optional = true, version = "^0.75.1"}
pydantic-settings = {extras = ["yaml"], version = "^2.4.0"}
humanize = "^4.10.0"
httpx = "^0.28.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.5.6"
mypy = "^1.11.1"
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
textual-dev = "^1.5.1"
types-tree-sitter = "^0.20.1.20240311"
types-setuptools = "^71.1.0.20240726"
types-pyyaml = "^6.0.12.20240724"
types-docutils = "^0.21.0.20240724"
tree-sitter = "^0.22.3"
types-tree-sitter-languages = "^1.10.0.20240612"
types-pygments = "^2.18.0.20240506"
datamodel-code-generator = "^0.25.8"
pytest-mock = "^3.14.0"
pytest-randomly = "^3.16.0"
polyfactory = "^2.19.0"
pytest-blockage = "^0.2.4"

[tool.poetry.extras]
tui = ["textual"]

[tool.poetry.scripts]
dokli = 'dokli.cli:app'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
