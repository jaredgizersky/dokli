
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from openapi_client.models.application_update_request import ApplicationUpdateRequest


class TestApplicationUpdateRequest(unittest.TestCase):
    """ApplicationUpdateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationUpdateRequest:
        """Test ApplicationUpdateRequest
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `ApplicationUpdateRequest`
        """
        model = ApplicationUpdateRequest()
        if include_optional:
            return ApplicationUpdateRequest(
                application_id = '0',
                name = '0',
                app_name = '',
                description = '',
                env = '',
                build_args = '',
                memory_reservation = 1.337,
                memory_limit = 1.337,
                cpu_reservation = 1.337,
                cpu_limit = 1.337,
                title = '',
                enabled = True,
                subtitle = '',
                command = '',
                refresh_token = '',
                source_type = 'github',
                repository = '',
                owner = '',
                branch = '',
                build_path = '',
                auto_deploy = True,
                username = '',
                password = '',
                docker_image = '',
                custom_git_url = '',
                custom_git_branch = '',
                custom_git_build_path = '',
                custom_git_ssh_key_id = '',
                dockerfile = '',
                docker_context_path = '',
                drop_build_path = '',
                health_check_swarm = openapi_client.models.application_update_request_health_check_swarm.application_update_request_healthCheckSwarm(
                    test = [
                        ''
                        ], 
                    interval = 1.337, 
                    timeout = 1.337, 
                    start_period = 1.337, 
                    retries = 1.337, ),
                restart_policy_swarm = openapi_client.models.application_update_request_restart_policy_swarm.application_update_request_restartPolicySwarm(
                    condition = '', 
                    delay = 1.337, 
                    max_attempts = 1.337, 
                    window = 1.337, ),
                placement_swarm = openapi_client.models.application_update_request_placement_swarm.application_update_request_placementSwarm(
                    constraints = [
                        ''
                        ], 
                    preferences = [
                        openapi_client.models.application_update_request_placement_swarm_preferences_inner.application_update_request_placementSwarm_Preferences_inner(
                            spread = openapi_client.models.application_update_request_placement_swarm_preferences_inner_spread.application_update_request_placementSwarm_Preferences_inner_Spread(
                                spread_descriptor = '', ), )
                        ], 
                    max_replicas = 1.337, 
                    platforms = [
                        openapi_client.models.application_update_request_placement_swarm_platforms_inner.application_update_request_placementSwarm_Platforms_inner(
                            architecture = '', 
                            os = '', )
                        ], ),
                update_config_swarm = openapi_client.models.application_update_request_update_config_swarm.application_update_request_updateConfigSwarm(
                    parallelism = 1.337, 
                    delay = 1.337, 
                    failure_action = '', 
                    monitor = 1.337, 
                    max_failure_ratio = 1.337, 
                    order = '', ),
                rollback_config_swarm = openapi_client.models.application_update_request_update_config_swarm.application_update_request_updateConfigSwarm(
                    parallelism = 1.337, 
                    delay = 1.337, 
                    failure_action = '', 
                    monitor = 1.337, 
                    max_failure_ratio = 1.337, 
                    order = '', ),
                mode_swarm = openapi_client.models.application_update_request_mode_swarm.application_update_request_modeSwarm(
                    replicated = openapi_client.models.application_update_request_mode_swarm_replicated.application_update_request_modeSwarm_Replicated(
                        replicas = 1.337, ), 
                    global = openapi_client.models.global.Global(), 
                    replicated_job = openapi_client.models.application_update_request_mode_swarm_replicated_job.application_update_request_modeSwarm_ReplicatedJob(
                        max_concurrent = 1.337, 
                        total_completions = 1.337, ), 
                    global_job = openapi_client.models.global_job.GlobalJob(), ),
                labels_swarm = {
                    'key' : ''
                    },
                network_swarm = [
                    openapi_client.models.application_update_request_network_swarm_inner.application_update_request_networkSwarm_inner(
                        target = '', 
                        aliases = [
                            ''
                            ], 
                        driver_opts = openapi_client.models.driver_opts.DriverOpts(), )
                    ],
                replicas = 1.337,
                application_status = 'idle',
                build_type = 'dockerfile',
                publish_directory = '',
                created_at = '',
                registry_id = '',
                project_id = ''
            )
        else:
            return ApplicationUpdateRequest(
                application_id = '0',
        )
        """

    def testApplicationUpdateRequest(self):
        """Test ApplicationUpdateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
