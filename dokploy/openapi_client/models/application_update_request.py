
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing_extensions import Self

from openapi_client.models.application_update_request_health_check_swarm import (
    ApplicationUpdateRequestHealthCheckSwarm,
)
from openapi_client.models.application_update_request_mode_swarm import ApplicationUpdateRequestModeSwarm
from openapi_client.models.application_update_request_network_swarm_inner import (
    ApplicationUpdateRequestNetworkSwarmInner,
)
from openapi_client.models.application_update_request_placement_swarm import ApplicationUpdateRequestPlacementSwarm
from openapi_client.models.application_update_request_restart_policy_swarm import (
    ApplicationUpdateRequestRestartPolicySwarm,
)
from openapi_client.models.application_update_request_update_config_swarm import (
    ApplicationUpdateRequestUpdateConfigSwarm,
)


class ApplicationUpdateRequest(BaseModel):
    """ApplicationUpdateRequest
    """  # noqa: E501

    application_id: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="applicationId")
    name: Annotated[str, Field(min_length=1, strict=True)] | None = None
    app_name: StrictStr | None = Field(default=None, alias="appName")
    description: StrictStr | None = None
    env: StrictStr | None = None
    build_args: StrictStr | None = Field(default=None, alias="buildArgs")
    memory_reservation: StrictFloat | StrictInt | None = Field(default=None, alias="memoryReservation")
    memory_limit: StrictFloat | StrictInt | None = Field(default=None, alias="memoryLimit")
    cpu_reservation: StrictFloat | StrictInt | None = Field(default=None, alias="cpuReservation")
    cpu_limit: StrictFloat | StrictInt | None = Field(default=None, alias="cpuLimit")
    title: StrictStr | None = None
    enabled: StrictBool | None = None
    subtitle: StrictStr | None = None
    command: StrictStr | None = None
    refresh_token: StrictStr | None = Field(default=None, alias="refreshToken")
    source_type: StrictStr | None = Field(default=None, alias="sourceType")
    repository: StrictStr | None = None
    owner: StrictStr | None = None
    branch: StrictStr | None = None
    build_path: StrictStr | None = Field(default=None, alias="buildPath")
    auto_deploy: StrictBool | None = Field(default=None, alias="autoDeploy")
    username: StrictStr | None = None
    password: StrictStr | None = None
    docker_image: StrictStr | None = Field(default=None, alias="dockerImage")
    custom_git_url: StrictStr | None = Field(default=None, alias="customGitUrl")
    custom_git_branch: StrictStr | None = Field(default=None, alias="customGitBranch")
    custom_git_build_path: StrictStr | None = Field(default=None, alias="customGitBuildPath")
    custom_git_ssh_key_id: StrictStr | None = Field(default=None, alias="customGitSSHKeyId")
    dockerfile: StrictStr | None = None
    docker_context_path: StrictStr | None = Field(default=None, alias="dockerContextPath")
    drop_build_path: StrictStr | None = Field(default=None, alias="dropBuildPath")
    health_check_swarm: ApplicationUpdateRequestHealthCheckSwarm | None = Field(
        default=None, alias="healthCheckSwarm"
    )
    restart_policy_swarm: ApplicationUpdateRequestRestartPolicySwarm | None = Field(
        default=None, alias="restartPolicySwarm"
    )
    placement_swarm: ApplicationUpdateRequestPlacementSwarm | None = Field(default=None, alias="placementSwarm")
    update_config_swarm: ApplicationUpdateRequestUpdateConfigSwarm | None = Field(
        default=None, alias="updateConfigSwarm"
    )
    rollback_config_swarm: ApplicationUpdateRequestUpdateConfigSwarm | None = Field(
        default=None, alias="rollbackConfigSwarm"
    )
    mode_swarm: ApplicationUpdateRequestModeSwarm | None = Field(default=None, alias="modeSwarm")
    labels_swarm: dict[str, StrictStr] | None = Field(default=None, alias="labelsSwarm")
    network_swarm: list[ApplicationUpdateRequestNetworkSwarmInner] | None = Field(
        default=None, alias="networkSwarm"
    )
    replicas: StrictFloat | StrictInt | None = None
    application_status: StrictStr | None = Field(default=None, alias="applicationStatus")
    build_type: StrictStr | None = Field(default=None, alias="buildType")
    publish_directory: StrictStr | None = Field(default=None, alias="publishDirectory")
    created_at: StrictStr | None = Field(default=None, alias="createdAt")
    registry_id: StrictStr | None = Field(default=None, alias="registryId")
    project_id: StrictStr | None = Field(default=None, alias="projectId")
    __properties: ClassVar[list[str]] = [
        "applicationId",
        "name",
        "appName",
        "description",
        "env",
        "buildArgs",
        "memoryReservation",
        "memoryLimit",
        "cpuReservation",
        "cpuLimit",
        "title",
        "enabled",
        "subtitle",
        "command",
        "refreshToken",
        "sourceType",
        "repository",
        "owner",
        "branch",
        "buildPath",
        "autoDeploy",
        "username",
        "password",
        "dockerImage",
        "customGitUrl",
        "customGitBranch",
        "customGitBuildPath",
        "customGitSSHKeyId",
        "dockerfile",
        "dockerContextPath",
        "dropBuildPath",
        "healthCheckSwarm",
        "restartPolicySwarm",
        "placementSwarm",
        "updateConfigSwarm",
        "rollbackConfigSwarm",
        "modeSwarm",
        "labelsSwarm",
        "networkSwarm",
        "replicas",
        "applicationStatus",
        "buildType",
        "publishDirectory",
        "createdAt",
        "registryId",
        "projectId",
    ]

    @field_validator("source_type")
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["github", "docker", "git"]):
            raise ValueError("must be one of enum values ('github', 'docker', 'git')")
        return value

    @field_validator("application_status")
    def application_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["idle", "running", "done", "error"]):
            raise ValueError("must be one of enum values ('idle', 'running', 'done', 'error')")
        return value

    @field_validator("build_type")
    def build_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["dockerfile", "heroku_buildpacks", "paketo_buildpacks", "nixpacks", "static"]):
            raise ValueError(
                "must be one of enum values ('dockerfile', 'heroku_buildpacks', 'paketo_buildpacks', 'nixpacks', 'static')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ApplicationUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of health_check_swarm
        if self.health_check_swarm:
            _dict["healthCheckSwarm"] = self.health_check_swarm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restart_policy_swarm
        if self.restart_policy_swarm:
            _dict["restartPolicySwarm"] = self.restart_policy_swarm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of placement_swarm
        if self.placement_swarm:
            _dict["placementSwarm"] = self.placement_swarm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_config_swarm
        if self.update_config_swarm:
            _dict["updateConfigSwarm"] = self.update_config_swarm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollback_config_swarm
        if self.rollback_config_swarm:
            _dict["rollbackConfigSwarm"] = self.rollback_config_swarm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mode_swarm
        if self.mode_swarm:
            _dict["modeSwarm"] = self.mode_swarm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in network_swarm (list)
        _items = []
        if self.network_swarm:
            for _item in self.network_swarm:
                if _item:
                    _items.append(_item.to_dict())
            _dict["networkSwarm"] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if env (nullable) is None
        # and model_fields_set contains the field
        if self.env is None and "env" in self.model_fields_set:
            _dict["env"] = None

        # set to None if build_args (nullable) is None
        # and model_fields_set contains the field
        if self.build_args is None and "build_args" in self.model_fields_set:
            _dict["buildArgs"] = None

        # set to None if memory_reservation (nullable) is None
        # and model_fields_set contains the field
        if self.memory_reservation is None and "memory_reservation" in self.model_fields_set:
            _dict["memoryReservation"] = None

        # set to None if memory_limit (nullable) is None
        # and model_fields_set contains the field
        if self.memory_limit is None and "memory_limit" in self.model_fields_set:
            _dict["memoryLimit"] = None

        # set to None if cpu_reservation (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_reservation is None and "cpu_reservation" in self.model_fields_set:
            _dict["cpuReservation"] = None

        # set to None if cpu_limit (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_limit is None and "cpu_limit" in self.model_fields_set:
            _dict["cpuLimit"] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict["title"] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict["enabled"] = None

        # set to None if subtitle (nullable) is None
        # and model_fields_set contains the field
        if self.subtitle is None and "subtitle" in self.model_fields_set:
            _dict["subtitle"] = None

        # set to None if command (nullable) is None
        # and model_fields_set contains the field
        if self.command is None and "command" in self.model_fields_set:
            _dict["command"] = None

        # set to None if refresh_token (nullable) is None
        # and model_fields_set contains the field
        if self.refresh_token is None and "refresh_token" in self.model_fields_set:
            _dict["refreshToken"] = None

        # set to None if repository (nullable) is None
        # and model_fields_set contains the field
        if self.repository is None and "repository" in self.model_fields_set:
            _dict["repository"] = None

        # set to None if owner (nullable) is None
        # and model_fields_set contains the field
        if self.owner is None and "owner" in self.model_fields_set:
            _dict["owner"] = None

        # set to None if branch (nullable) is None
        # and model_fields_set contains the field
        if self.branch is None and "branch" in self.model_fields_set:
            _dict["branch"] = None

        # set to None if build_path (nullable) is None
        # and model_fields_set contains the field
        if self.build_path is None and "build_path" in self.model_fields_set:
            _dict["buildPath"] = None

        # set to None if auto_deploy (nullable) is None
        # and model_fields_set contains the field
        if self.auto_deploy is None and "auto_deploy" in self.model_fields_set:
            _dict["autoDeploy"] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict["username"] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict["password"] = None

        # set to None if docker_image (nullable) is None
        # and model_fields_set contains the field
        if self.docker_image is None and "docker_image" in self.model_fields_set:
            _dict["dockerImage"] = None

        # set to None if custom_git_url (nullable) is None
        # and model_fields_set contains the field
        if self.custom_git_url is None and "custom_git_url" in self.model_fields_set:
            _dict["customGitUrl"] = None

        # set to None if custom_git_branch (nullable) is None
        # and model_fields_set contains the field
        if self.custom_git_branch is None and "custom_git_branch" in self.model_fields_set:
            _dict["customGitBranch"] = None

        # set to None if custom_git_build_path (nullable) is None
        # and model_fields_set contains the field
        if self.custom_git_build_path is None and "custom_git_build_path" in self.model_fields_set:
            _dict["customGitBuildPath"] = None

        # set to None if custom_git_ssh_key_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_git_ssh_key_id is None and "custom_git_ssh_key_id" in self.model_fields_set:
            _dict["customGitSSHKeyId"] = None

        # set to None if dockerfile (nullable) is None
        # and model_fields_set contains the field
        if self.dockerfile is None and "dockerfile" in self.model_fields_set:
            _dict["dockerfile"] = None

        # set to None if docker_context_path (nullable) is None
        # and model_fields_set contains the field
        if self.docker_context_path is None and "docker_context_path" in self.model_fields_set:
            _dict["dockerContextPath"] = None

        # set to None if drop_build_path (nullable) is None
        # and model_fields_set contains the field
        if self.drop_build_path is None and "drop_build_path" in self.model_fields_set:
            _dict["dropBuildPath"] = None

        # set to None if health_check_swarm (nullable) is None
        # and model_fields_set contains the field
        if self.health_check_swarm is None and "health_check_swarm" in self.model_fields_set:
            _dict["healthCheckSwarm"] = None

        # set to None if restart_policy_swarm (nullable) is None
        # and model_fields_set contains the field
        if self.restart_policy_swarm is None and "restart_policy_swarm" in self.model_fields_set:
            _dict["restartPolicySwarm"] = None

        # set to None if placement_swarm (nullable) is None
        # and model_fields_set contains the field
        if self.placement_swarm is None and "placement_swarm" in self.model_fields_set:
            _dict["placementSwarm"] = None

        # set to None if update_config_swarm (nullable) is None
        # and model_fields_set contains the field
        if self.update_config_swarm is None and "update_config_swarm" in self.model_fields_set:
            _dict["updateConfigSwarm"] = None

        # set to None if rollback_config_swarm (nullable) is None
        # and model_fields_set contains the field
        if self.rollback_config_swarm is None and "rollback_config_swarm" in self.model_fields_set:
            _dict["rollbackConfigSwarm"] = None

        # set to None if mode_swarm (nullable) is None
        # and model_fields_set contains the field
        if self.mode_swarm is None and "mode_swarm" in self.model_fields_set:
            _dict["modeSwarm"] = None

        # set to None if labels_swarm (nullable) is None
        # and model_fields_set contains the field
        if self.labels_swarm is None and "labels_swarm" in self.model_fields_set:
            _dict["labelsSwarm"] = None

        # set to None if network_swarm (nullable) is None
        # and model_fields_set contains the field
        if self.network_swarm is None and "network_swarm" in self.model_fields_set:
            _dict["networkSwarm"] = None

        # set to None if publish_directory (nullable) is None
        # and model_fields_set contains the field
        if self.publish_directory is None and "publish_directory" in self.model_fields_set:
            _dict["publishDirectory"] = None

        # set to None if registry_id (nullable) is None
        # and model_fields_set contains the field
        if self.registry_id is None and "registry_id" in self.model_fields_set:
            _dict["registryId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ApplicationUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "applicationId": obj.get("applicationId"),
                "name": obj.get("name"),
                "appName": obj.get("appName"),
                "description": obj.get("description"),
                "env": obj.get("env"),
                "buildArgs": obj.get("buildArgs"),
                "memoryReservation": obj.get("memoryReservation"),
                "memoryLimit": obj.get("memoryLimit"),
                "cpuReservation": obj.get("cpuReservation"),
                "cpuLimit": obj.get("cpuLimit"),
                "title": obj.get("title"),
                "enabled": obj.get("enabled"),
                "subtitle": obj.get("subtitle"),
                "command": obj.get("command"),
                "refreshToken": obj.get("refreshToken"),
                "sourceType": obj.get("sourceType"),
                "repository": obj.get("repository"),
                "owner": obj.get("owner"),
                "branch": obj.get("branch"),
                "buildPath": obj.get("buildPath"),
                "autoDeploy": obj.get("autoDeploy"),
                "username": obj.get("username"),
                "password": obj.get("password"),
                "dockerImage": obj.get("dockerImage"),
                "customGitUrl": obj.get("customGitUrl"),
                "customGitBranch": obj.get("customGitBranch"),
                "customGitBuildPath": obj.get("customGitBuildPath"),
                "customGitSSHKeyId": obj.get("customGitSSHKeyId"),
                "dockerfile": obj.get("dockerfile"),
                "dockerContextPath": obj.get("dockerContextPath"),
                "dropBuildPath": obj.get("dropBuildPath"),
                "healthCheckSwarm": ApplicationUpdateRequestHealthCheckSwarm.from_dict(obj["healthCheckSwarm"])
                if obj.get("healthCheckSwarm") is not None
                else None,
                "restartPolicySwarm": ApplicationUpdateRequestRestartPolicySwarm.from_dict(obj["restartPolicySwarm"])
                if obj.get("restartPolicySwarm") is not None
                else None,
                "placementSwarm": ApplicationUpdateRequestPlacementSwarm.from_dict(obj["placementSwarm"])
                if obj.get("placementSwarm") is not None
                else None,
                "updateConfigSwarm": ApplicationUpdateRequestUpdateConfigSwarm.from_dict(obj["updateConfigSwarm"])
                if obj.get("updateConfigSwarm") is not None
                else None,
                "rollbackConfigSwarm": ApplicationUpdateRequestUpdateConfigSwarm.from_dict(obj["rollbackConfigSwarm"])
                if obj.get("rollbackConfigSwarm") is not None
                else None,
                "modeSwarm": ApplicationUpdateRequestModeSwarm.from_dict(obj["modeSwarm"])
                if obj.get("modeSwarm") is not None
                else None,
                "labelsSwarm": obj.get("labelsSwarm"),
                "networkSwarm": [
                    ApplicationUpdateRequestNetworkSwarmInner.from_dict(_item) for _item in obj["networkSwarm"]
                ]
                if obj.get("networkSwarm") is not None
                else None,
                "replicas": obj.get("replicas"),
                "applicationStatus": obj.get("applicationStatus"),
                "buildType": obj.get("buildType"),
                "publishDirectory": obj.get("publishDirectory"),
                "createdAt": obj.get("createdAt"),
                "registryId": obj.get("registryId"),
                "projectId": obj.get("projectId"),
            }
        )
        return _obj
