
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing_extensions import Self


class MysqlUpdateRequest(BaseModel):
    """MysqlUpdateRequest
    """  # noqa: E501

    mysql_id: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="mysqlId")
    name: Annotated[str, Field(min_length=1, strict=True)] | None = None
    app_name: Annotated[str, Field(min_length=1, strict=True)] | None = Field(default=None, alias="appName")
    description: StrictStr | None = None
    database_name: Annotated[str, Field(min_length=1, strict=True)] | None = Field(
        default=None, alias="databaseName"
    )
    database_user: Annotated[str, Field(min_length=1, strict=True)] | None = Field(
        default=None, alias="databaseUser"
    )
    database_password: StrictStr | None = Field(default=None, alias="databasePassword")
    database_root_password: StrictStr | None = Field(default=None, alias="databaseRootPassword")
    docker_image: StrictStr | None = Field(default="mysql:8", alias="dockerImage")
    command: StrictStr | None = None
    env: StrictStr | None = None
    memory_reservation: StrictFloat | StrictInt | None = Field(default=None, alias="memoryReservation")
    memory_limit: StrictFloat | StrictInt | None = Field(default=None, alias="memoryLimit")
    cpu_reservation: StrictFloat | StrictInt | None = Field(default=None, alias="cpuReservation")
    cpu_limit: StrictFloat | StrictInt | None = Field(default=None, alias="cpuLimit")
    external_port: StrictFloat | StrictInt | None = Field(default=None, alias="externalPort")
    application_status: StrictStr | None = Field(default=None, alias="applicationStatus")
    created_at: StrictStr | None = Field(default=None, alias="createdAt")
    project_id: StrictStr | None = Field(default=None, alias="projectId")
    __properties: ClassVar[list[str]] = [
        "mysqlId",
        "name",
        "appName",
        "description",
        "databaseName",
        "databaseUser",
        "databasePassword",
        "databaseRootPassword",
        "dockerImage",
        "command",
        "env",
        "memoryReservation",
        "memoryLimit",
        "cpuReservation",
        "cpuLimit",
        "externalPort",
        "applicationStatus",
        "createdAt",
        "projectId",
    ]

    @field_validator("application_status")
    def application_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["idle", "running", "done", "error"]):
            raise ValueError("must be one of enum values ('idle', 'running', 'done', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of MysqlUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if command (nullable) is None
        # and model_fields_set contains the field
        if self.command is None and "command" in self.model_fields_set:
            _dict["command"] = None

        # set to None if env (nullable) is None
        # and model_fields_set contains the field
        if self.env is None and "env" in self.model_fields_set:
            _dict["env"] = None

        # set to None if memory_reservation (nullable) is None
        # and model_fields_set contains the field
        if self.memory_reservation is None and "memory_reservation" in self.model_fields_set:
            _dict["memoryReservation"] = None

        # set to None if memory_limit (nullable) is None
        # and model_fields_set contains the field
        if self.memory_limit is None and "memory_limit" in self.model_fields_set:
            _dict["memoryLimit"] = None

        # set to None if cpu_reservation (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_reservation is None and "cpu_reservation" in self.model_fields_set:
            _dict["cpuReservation"] = None

        # set to None if cpu_limit (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_limit is None and "cpu_limit" in self.model_fields_set:
            _dict["cpuLimit"] = None

        # set to None if external_port (nullable) is None
        # and model_fields_set contains the field
        if self.external_port is None and "external_port" in self.model_fields_set:
            _dict["externalPort"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of MysqlUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "mysqlId": obj.get("mysqlId"),
                "name": obj.get("name"),
                "appName": obj.get("appName"),
                "description": obj.get("description"),
                "databaseName": obj.get("databaseName"),
                "databaseUser": obj.get("databaseUser"),
                "databasePassword": obj.get("databasePassword"),
                "databaseRootPassword": obj.get("databaseRootPassword"),
                "dockerImage": obj.get("dockerImage") if obj.get("dockerImage") is not None else "mysql:8",
                "command": obj.get("command"),
                "env": obj.get("env"),
                "memoryReservation": obj.get("memoryReservation"),
                "memoryLimit": obj.get("memoryLimit"),
                "cpuReservation": obj.get("cpuReservation"),
                "cpuLimit": obj.get("cpuLimit"),
                "externalPort": obj.get("externalPort"),
                "applicationStatus": obj.get("applicationStatus"),
                "createdAt": obj.get("createdAt"),
                "projectId": obj.get("projectId"),
            }
        )
        return _obj
