
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing_extensions import Self


class ComposeUpdateRequest(BaseModel):
    """ComposeUpdateRequest
    """  # noqa: E501

    compose_id: StrictStr = Field(alias="composeId")
    name: Annotated[str, Field(min_length=1, strict=True)] | None = None
    app_name: StrictStr | None = Field(default=None, alias="appName")
    description: StrictStr | None = None
    env: StrictStr | None = None
    compose_file: StrictStr | None = Field(default=None, alias="composeFile")
    refresh_token: StrictStr | None = Field(default=None, alias="refreshToken")
    source_type: StrictStr | None = Field(default=None, alias="sourceType")
    compose_type: StrictStr | None = Field(default=None, alias="composeType")
    repository: StrictStr | None = None
    owner: StrictStr | None = None
    branch: StrictStr | None = None
    auto_deploy: StrictBool | None = Field(default=None, alias="autoDeploy")
    custom_git_url: StrictStr | None = Field(default=None, alias="customGitUrl")
    custom_git_branch: StrictStr | None = Field(default=None, alias="customGitBranch")
    custom_git_ssh_key_id: StrictStr | None = Field(default=None, alias="customGitSSHKeyId")
    command: StrictStr | None = None
    compose_path: Annotated[str, Field(min_length=1, strict=True)] | None = Field(default=None, alias="composePath")
    compose_status: StrictStr | None = Field(default=None, alias="composeStatus")
    project_id: StrictStr | None = Field(default=None, alias="projectId")
    created_at: StrictStr | None = Field(default=None, alias="createdAt")
    __properties: ClassVar[list[str]] = [
        "composeId",
        "name",
        "appName",
        "description",
        "env",
        "composeFile",
        "refreshToken",
        "sourceType",
        "composeType",
        "repository",
        "owner",
        "branch",
        "autoDeploy",
        "customGitUrl",
        "customGitBranch",
        "customGitSSHKeyId",
        "command",
        "composePath",
        "composeStatus",
        "projectId",
        "createdAt",
    ]

    @field_validator("source_type")
    def source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["git", "github", "raw"]):
            raise ValueError("must be one of enum values ('git', 'github', 'raw')")
        return value

    @field_validator("compose_type")
    def compose_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["docker-compose", "stack"]):
            raise ValueError("must be one of enum values ('docker-compose', 'stack')")
        return value

    @field_validator("compose_status")
    def compose_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["idle", "running", "done", "error"]):
            raise ValueError("must be one of enum values ('idle', 'running', 'done', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ComposeUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if env (nullable) is None
        # and model_fields_set contains the field
        if self.env is None and "env" in self.model_fields_set:
            _dict["env"] = None

        # set to None if refresh_token (nullable) is None
        # and model_fields_set contains the field
        if self.refresh_token is None and "refresh_token" in self.model_fields_set:
            _dict["refreshToken"] = None

        # set to None if repository (nullable) is None
        # and model_fields_set contains the field
        if self.repository is None and "repository" in self.model_fields_set:
            _dict["repository"] = None

        # set to None if owner (nullable) is None
        # and model_fields_set contains the field
        if self.owner is None and "owner" in self.model_fields_set:
            _dict["owner"] = None

        # set to None if branch (nullable) is None
        # and model_fields_set contains the field
        if self.branch is None and "branch" in self.model_fields_set:
            _dict["branch"] = None

        # set to None if auto_deploy (nullable) is None
        # and model_fields_set contains the field
        if self.auto_deploy is None and "auto_deploy" in self.model_fields_set:
            _dict["autoDeploy"] = None

        # set to None if custom_git_url (nullable) is None
        # and model_fields_set contains the field
        if self.custom_git_url is None and "custom_git_url" in self.model_fields_set:
            _dict["customGitUrl"] = None

        # set to None if custom_git_branch (nullable) is None
        # and model_fields_set contains the field
        if self.custom_git_branch is None and "custom_git_branch" in self.model_fields_set:
            _dict["customGitBranch"] = None

        # set to None if custom_git_ssh_key_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_git_ssh_key_id is None and "custom_git_ssh_key_id" in self.model_fields_set:
            _dict["customGitSSHKeyId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ComposeUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "composeId": obj.get("composeId"),
                "name": obj.get("name"),
                "appName": obj.get("appName"),
                "description": obj.get("description"),
                "env": obj.get("env"),
                "composeFile": obj.get("composeFile"),
                "refreshToken": obj.get("refreshToken"),
                "sourceType": obj.get("sourceType"),
                "composeType": obj.get("composeType"),
                "repository": obj.get("repository"),
                "owner": obj.get("owner"),
                "branch": obj.get("branch"),
                "autoDeploy": obj.get("autoDeploy"),
                "customGitUrl": obj.get("customGitUrl"),
                "customGitBranch": obj.get("customGitBranch"),
                "customGitSSHKeyId": obj.get("customGitSSHKeyId"),
                "command": obj.get("command"),
                "composePath": obj.get("composePath"),
                "composeStatus": obj.get("composeStatus"),
                "projectId": obj.get("projectId"),
                "createdAt": obj.get("createdAt"),
            }
        )
        return _obj
