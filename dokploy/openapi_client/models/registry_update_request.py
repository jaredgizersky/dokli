
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class RegistryUpdateRequest(BaseModel):
    """RegistryUpdateRequest
    """  # noqa: E501

    registry_id: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="registryId")
    registry_name: Annotated[str, Field(min_length=1, strict=True)] | None = Field(
        default=None, alias="registryName"
    )
    image_prefix: StrictStr | None = Field(default=None, alias="imagePrefix")
    username: Annotated[str, Field(min_length=1, strict=True)] | None = None
    password: Annotated[str, Field(min_length=1, strict=True)] | None = None
    registry_url: Annotated[str, Field(min_length=1, strict=True)] | None = Field(default=None, alias="registryUrl")
    created_at: StrictStr | None = Field(default=None, alias="createdAt")
    registry_type: StrictStr | None = Field(default=None, alias="registryType")
    admin_id: Annotated[str, Field(min_length=1, strict=True)] | None = Field(default=None, alias="adminId")
    __properties: ClassVar[list[str]] = [
        "registryId",
        "registryName",
        "imagePrefix",
        "username",
        "password",
        "registryUrl",
        "createdAt",
        "registryType",
        "adminId",
    ]

    @field_validator("registry_type")
    def registry_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["selfHosted", "cloud"]):
            raise ValueError("must be one of enum values ('selfHosted', 'cloud')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of RegistryUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if image_prefix (nullable) is None
        # and model_fields_set contains the field
        if self.image_prefix is None and "image_prefix" in self.model_fields_set:
            _dict["imagePrefix"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of RegistryUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "registryId": obj.get("registryId"),
                "registryName": obj.get("registryName"),
                "imagePrefix": obj.get("imagePrefix"),
                "username": obj.get("username"),
                "password": obj.get("password"),
                "registryUrl": obj.get("registryUrl"),
                "createdAt": obj.get("createdAt"),
                "registryType": obj.get("registryType"),
                "adminId": obj.get("adminId"),
            }
        )
        return _obj
