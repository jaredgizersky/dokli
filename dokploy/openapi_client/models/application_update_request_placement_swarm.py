
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Self

from openapi_client.models.application_update_request_placement_swarm_platforms_inner import (
    ApplicationUpdateRequestPlacementSwarmPlatformsInner,
)
from openapi_client.models.application_update_request_placement_swarm_preferences_inner import (
    ApplicationUpdateRequestPlacementSwarmPreferencesInner,
)


class ApplicationUpdateRequestPlacementSwarm(BaseModel):
    """ApplicationUpdateRequestPlacementSwarm
    """  # noqa: E501

    constraints: list[StrictStr] | None = Field(default=None, alias="Constraints")
    preferences: list[ApplicationUpdateRequestPlacementSwarmPreferencesInner] | None = Field(
        default=None, alias="Preferences"
    )
    max_replicas: StrictFloat | StrictInt | None = Field(default=None, alias="MaxReplicas")
    platforms: list[ApplicationUpdateRequestPlacementSwarmPlatformsInner] | None = Field(
        default=None, alias="Platforms"
    )
    __properties: ClassVar[list[str]] = ["Constraints", "Preferences", "MaxReplicas", "Platforms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ApplicationUpdateRequestPlacementSwarm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in preferences (list)
        _items = []
        if self.preferences:
            for _item in self.preferences:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Preferences"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in platforms (list)
        _items = []
        if self.platforms:
            for _item in self.platforms:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Platforms"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ApplicationUpdateRequestPlacementSwarm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "Constraints": obj.get("Constraints"),
                "Preferences": [
                    ApplicationUpdateRequestPlacementSwarmPreferencesInner.from_dict(_item)
                    for _item in obj["Preferences"]
                ]
                if obj.get("Preferences") is not None
                else None,
                "MaxReplicas": obj.get("MaxReplicas"),
                "Platforms": [
                    ApplicationUpdateRequestPlacementSwarmPlatformsInner.from_dict(_item) for _item in obj["Platforms"]
                ]
                if obj.get("Platforms") is not None
                else None,
            }
        )
        return _obj
