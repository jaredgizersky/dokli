
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing_extensions import Self


class AuthUpdateRequest(BaseModel):
    """AuthUpdateRequest
    """  # noqa: E501

    id: StrictStr | None = None
    email: StrictStr | None
    password: StrictStr | None
    rol: StrictStr | None = None
    image: StrictStr | None = None
    secret: StrictStr | None = None
    token: StrictStr | None = None
    is2_fa_enabled: StrictBool | None = Field(default=None, alias="is2FAEnabled")
    created_at: StrictStr | None = Field(default=None, alias="createdAt")
    __properties: ClassVar[list[str]] = [
        "id",
        "email",
        "password",
        "rol",
        "image",
        "secret",
        "token",
        "is2FAEnabled",
        "createdAt",
    ]

    @field_validator("rol")
    def rol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["admin", "user"]):
            raise ValueError("must be one of enum values ('admin', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of AuthUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict["email"] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict["password"] = None

        # set to None if secret (nullable) is None
        # and model_fields_set contains the field
        if self.secret is None and "secret" in self.model_fields_set:
            _dict["secret"] = None

        # set to None if token (nullable) is None
        # and model_fields_set contains the field
        if self.token is None and "token" in self.model_fields_set:
            _dict["token"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of AuthUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "email": obj.get("email"),
                "password": obj.get("password"),
                "rol": obj.get("rol"),
                "image": obj.get("image"),
                "secret": obj.get("secret"),
                "token": obj.get("token"),
                "is2FAEnabled": obj.get("is2FAEnabled"),
                "createdAt": obj.get("createdAt"),
            }
        )
        return _obj
