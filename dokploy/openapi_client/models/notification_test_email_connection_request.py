
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self


class NotificationTestEmailConnectionRequest(BaseModel):
    """NotificationTestEmailConnectionRequest
    """  # noqa: E501

    smtp_server: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="smtpServer")
    smtp_port: Annotated[float, Field(strict=True, ge=1)] | Annotated[int, Field(strict=True, ge=1)] = Field(
        alias="smtpPort"
    )
    username: Annotated[str, Field(min_length=1, strict=True)]
    password: Annotated[str, Field(min_length=1, strict=True)]
    to_addresses: Annotated[list[StrictStr], Field(min_length=1)] = Field(alias="toAddresses")
    from_address: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="fromAddress")
    __properties: ClassVar[list[str]] = [
        "smtpServer",
        "smtpPort",
        "username",
        "password",
        "toAddresses",
        "fromAddress",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of NotificationTestEmailConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of NotificationTestEmailConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "smtpServer": obj.get("smtpServer"),
                "smtpPort": obj.get("smtpPort"),
                "username": obj.get("username"),
                "password": obj.get("password"),
                "toAddresses": obj.get("toAddresses"),
                "fromAddress": obj.get("fromAddress"),
            }
        )
        return _obj
