
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class MountsCreateRequest(BaseModel):
    """MountsCreateRequest
    """  # noqa: E501

    type: StrictStr
    host_path: StrictStr | None = Field(default=None, alias="hostPath")
    volume_name: StrictStr | None = Field(default=None, alias="volumeName")
    content: StrictStr | None = None
    mount_path: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="mountPath")
    service_type: StrictStr | None = Field(default="application", alias="serviceType")
    file_path: StrictStr | None = Field(default=None, alias="filePath")
    service_id: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="serviceId")
    __properties: ClassVar[list[str]] = [
        "type",
        "hostPath",
        "volumeName",
        "content",
        "mountPath",
        "serviceType",
        "filePath",
        "serviceId",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["bind", "volume", "file"]):
            raise ValueError("must be one of enum values ('bind', 'volume', 'file')")
        return value

    @field_validator("service_type")
    def service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["application", "postgres", "mysql", "mariadb", "mongo", "redis", "compose"]):
            raise ValueError(
                "must be one of enum values ('application', 'postgres', 'mysql', 'mariadb', 'mongo', 'redis', 'compose')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of MountsCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if host_path (nullable) is None
        # and model_fields_set contains the field
        if self.host_path is None and "host_path" in self.model_fields_set:
            _dict["hostPath"] = None

        # set to None if volume_name (nullable) is None
        # and model_fields_set contains the field
        if self.volume_name is None and "volume_name" in self.model_fields_set:
            _dict["volumeName"] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict["content"] = None

        # set to None if file_path (nullable) is None
        # and model_fields_set contains the field
        if self.file_path is None and "file_path" in self.model_fields_set:
            _dict["filePath"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of MountsCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "hostPath": obj.get("hostPath"),
                "volumeName": obj.get("volumeName"),
                "content": obj.get("content"),
                "mountPath": obj.get("mountPath"),
                "serviceType": obj.get("serviceType") if obj.get("serviceType") is not None else "application",
                "filePath": obj.get("filePath"),
                "serviceId": obj.get("serviceId"),
            }
        )
        return _obj
