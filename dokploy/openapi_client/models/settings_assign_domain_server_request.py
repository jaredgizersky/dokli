
"""Dokploy API

Endpoints for dokploy

The version of the OpenAPI document: v0.6.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class SettingsAssignDomainServerRequest(BaseModel):
    """SettingsAssignDomainServerRequest
    """  # noqa: E501

    lets_encrypt_email: StrictStr | None = Field(alias="letsEncryptEmail")
    host: StrictStr | None
    certificate_type: StrictStr | None = Field(default="none", alias="certificateType")
    __properties: ClassVar[list[str]] = ["letsEncryptEmail", "host", "certificateType"]

    @field_validator("certificate_type")
    def certificate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["letsencrypt", "none"]):
            raise ValueError("must be one of enum values ('letsencrypt', 'none')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of SettingsAssignDomainServerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if lets_encrypt_email (nullable) is None
        # and model_fields_set contains the field
        if self.lets_encrypt_email is None and "lets_encrypt_email" in self.model_fields_set:
            _dict["letsEncryptEmail"] = None

        # set to None if host (nullable) is None
        # and model_fields_set contains the field
        if self.host is None and "host" in self.model_fields_set:
            _dict["host"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of SettingsAssignDomainServerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "letsEncryptEmail": obj.get("letsEncryptEmail"),
                "host": obj.get("host"),
                "certificateType": obj.get("certificateType") if obj.get("certificateType") is not None else "none",
            }
        )
        return _obj
